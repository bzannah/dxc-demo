import Pusher from 'pusher-js';

interface components$2 {
    schemas: {
        /** @description Public ID (used in code). Do not change after creation. */
        PublicIdProperty: string;
        /** @description The definition of a component parameter */
        ComponentDefinitionParameter: {
            id: components$2["schemas"]["PublicIdProperty"];
            /** @description Friendly name of the parameter */
            name: string;
            /** @description Appears next to the parameter in the Composition editor */
            helpText?: string;
            /** @description Type name of the parameter (provided by a Uniform integration) */
            type: string;
            /** @description The configuration object for the type (type-specific) */
            typeConfig?: unknown;
        };
        /** @description The definition of a named component slot that can contain other components */
        ComponentDefinitionSlot: {
            id: components$2["schemas"]["PublicIdProperty"];
            /** @description Friendly name of the slot */
            name: string;
            /** @description A list of component definition public IDs that are allowed in this named slot */
            allowedComponents: string[];
            /**
             * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
             * @default false
             */
            inheritAllowedComponents: boolean;
            /** @description Minimum valid number of components in this slot */
            minComponents?: number;
            /** @description Maximum valid number of components in this slot */
            maxComponents?: number;
        };
        /** @description The definition of a composition's slug settings */
        ComponentDefinitionSlugSettings: {
            /**
             * @description Whether the slug is required
             * no: slug is optional
             * yes: slug is required
             * disabled: slug is disabled and will not be shown in the editor
             *
             * @default no
             * @enum {string}
             */
            required?: "no" | "yes" | "disabled";
            /**
             * @description Slug uniqueness configuration.
             * no = no unique constraint
             * local = must be unique within this component type
             * global = must be unique across all component types
             *
             * @enum {string}
             */
            unique?: "no" | "local" | "global";
            /** @description Regular expression slugs must match */
            regularExpression?: string;
            /**
             * @description Custom error message when regular expression validation fails.
             * Has no effect if `regularExpression` is not set.
             */
            regularExpressionMessage?: string;
        };
        /** @description The definition of a component variant */
        ComponentDefinitionVariant: {
            id: components$2["schemas"]["PublicIdProperty"];
            /** @description Friendly name of the variant */
            name: string;
        };
        /** @description Permission set for a component defintion */
        ComponentDefinitionPermission: {
            roleId: components$2["schemas"]["PublicIdProperty"];
            /**
             * @description Permission type for this permission ComponentDefinition:
             * read | write | create | delete
             *
             * @enum {string}
             */
            permission: "read" | "write" | "create" | "delete";
            /** @description State of the component that this permission applies to */
            state: number;
        };
        /** @description Defines a component type that can live on a Composition */
        ComponentDefinition: {
            id: components$2["schemas"]["PublicIdProperty"];
            /** @description Friendly name of the component definition */
            name: string;
            /**
             * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
             * @default screen
             */
            icon?: string;
            /**
             * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
             * The parameter type must support being used as a title parameter for this to work.
             */
            titleParameter?: string | null;
            /**
             * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
             * @default false
             */
            canBeComposition?: boolean;
            /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
            parameters?: components$2["schemas"]["ComponentDefinitionParameter"][];
            /**
             * @description if this component uses team permissions or custom permissions
             * @default true
             */
            useTeamPermissions?: boolean;
            /** @description Custom role permissions for this component definition */
            permissions?: components$2["schemas"]["ComponentDefinitionPermission"][];
            /** @description The named slots for this component; placement areas where arrays of other components can be added. */
            slots?: components$2["schemas"]["ComponentDefinitionSlot"][];
            slugSettings?: components$2["schemas"]["ComponentDefinitionSlugSettings"];
            /** @description Default component instance value */
            defaults?: components$2["schemas"]["ComponentInstance"] | null;
            /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
            variants?: components$2["schemas"]["ComponentDefinitionVariant"][];
            /** @description Created date string for this definition (ignored for writes) */
            created?: string;
            /** @description Last modified date string for this definition (ignored for writes) */
            updated?: string;
        };
        /** @description Defines an editable parameter on a component. */
        ComponentParameter: {
            /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
            value: unknown;
            /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
            type: string;
            connectedData?: components$2["schemas"]["DataElementConnectionDefinition"];
        };
        /**
         * @deprecated
         * @description Defines a connection to a data element on a data resource. Do not use.
         */
        DataElementConnectionDefinition: {
            /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
            pointer: string;
            /**
             * @description The syntax used to select the data element to bind to
             * @enum {string}
             */
            syntax: "jptr";
            /**
             * @description Whether an error should occur if the connected data element cannot be resolved (i.e. a missing property in the data resource).
             * In all cases the binding process will remove the parameter data for the unresolvable data element.
             * When this is true, and the data element failed to bind, the warning entry returned from the binding process will be changed to an error entry.
             *
             * @default false
             */
            required?: boolean;
        };
        /** @description Defines the shape of a component instance served by the composition API. */
        ComponentInstance: {
            /** @description Type of the component instance (public_id of its definition) */
            type: string;
            /** @description Component parameter values for the component instance */
            parameters?: {
                [key: string]: components$2["schemas"]["ComponentParameter"];
            };
            /** @description Public ID of alternate visual appearance for this component, if any selected */
            variant?: string;
            /** @description Slots containing any child components */
            slots?: {
                [key: string]: components$2["schemas"]["ComponentInstance"][];
            };
            /** @description Unique identifier of the component within the composition. This is not set unless specifically requested via `withComponentIDs` API parameter. */
            _id?: string;
            /** @description Indicates this component instance should be sourced from a pattern library pattern. */
            _pattern?: string;
            _dataResources?: components$2["schemas"]["DataResourceDefinitions"];
            /**
             * @deprecated
             * @description Data definitions coming from a pattern resolved for this component. Merged with _data during resolution.
             * Means nothing for PUTs; it will be ignored.
             */
            _patternDataResources?: {
                [key: string]: components$2["schemas"]["DataResourceDefinition"];
            };
            /**
             * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
             * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
             * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
             * Means nothing for PUTs; it will be ignored.
             *
             * @enum {string}
             */
            _patternError?: "NOTFOUND" | "CYCLIC";
        };
        /** @description Defines the shape of the root component in a composition */
        RootComponentInstance: {
            /** @description Type of the component instance (public_id of its definition) */
            type: string;
            /** @description Component parameter values for the component instance */
            parameters?: {
                [key: string]: components$2["schemas"]["ComponentParameter"];
            };
            /** @description Public ID of alternate visual appearance for this component, if any selected */
            variant?: string;
            /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
            projectMapNodes?: components$2["schemas"]["CompositionProjectMapNodeInfo"][];
            /** @description Slots containing any child components */
            slots?: {
                [key: string]: components$2["schemas"]["ComponentInstance"][];
            };
            /** @description The public UUID of the composition. */
            _id: string;
            /** @description Slug pattern of this component. */
            _slug?: string | null;
            /** @description Friendly name of this component. */
            _name: string;
            _dataResources?: components$2["schemas"]["DataResourceDefinitions"];
        };
        /**
         * @deprecated
         * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
         * These are created in the UI and shared across a whole project.
         * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
         * for all header, parameter, and variable values to obscure the actual encrypted secret value.
         */
        DataSource: {
            /** @description Public ID of the data source */
            id: string;
            /** @description Display name of the data source */
            displayName: string;
            /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
            connectorType: string;
            /** @description Base resource URL of the data source. No trailing slash. */
            baseUrl: string;
            /** @description HTTP headers to pass with requests to the data source */
            headers?: {
                key: string;
                value: string;
            }[];
            /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
            parameters?: {
                key: string;
                value: string;
            }[];
            /** @description Variables needed to make calls to the data source */
            variables?: {
                [key: string]: components$2["schemas"]["DataVariableDefinition"];
            };
            /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
            custom?: {
                [key: string]: unknown;
            };
        };
        /**
         * @deprecated
         * @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project.
         */
        DataType: {
            /** @description Public ID of the data type */
            id: string;
            /** @description Display name of the data type */
            displayName: string;
            /** @description Public ID of the associated data source */
            dataSourceId: string;
            /**
             * @description A connector-specific archetype for this data type; used to select UI as well as perform any
             * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
             * no special UI or processing is required.
             */
            archetype?: string;
            allowedOnComponents?: string[];
            /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
            path: string;
            /** @description Time-to-live (in seconds) for the primary resource data cache. */
            ttl?: number;
            /** @description Long term data resource cache configuration. */
            longTermCache?: {
                /** @description A flag to turn the long term cache on. */
                enabled: boolean;
                /** @description Time-to-live (in hours) for the long term resource data cache. */
                ttlInHours?: number;
            };
            /** @description A key for the resource data cache purging. */
            purgeKey?: string;
            /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
            badgeIconUrl?: string;
            /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
            headers?: {
                key: string;
                value: string;
            }[];
            /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
            parameters?: {
                key: string;
                value: string;
            }[];
            /** @description Body to pass with requests to the data type (ignored unless method is POST) */
            body?: string;
            /**
             * @description HTTP method to use with requests to the data type.
             * @default GET
             * @enum {string}
             */
            method: "GET" | "POST" | "HEAD";
            /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
            variables?: {
                [key: string]: components$2["schemas"]["DataVariableDefinition"];
            };
            /** @description Custom configuration specific to the data source being defined */
            custom?: {
                [key: string]: unknown;
            };
        };
        /**
         * @deprecated
         * @description Defines the shape of a data variable on a Data Source or Data Type
         */
        DataVariableDefinition: {
            /** @description Display name of the data variable */
            displayName?: string;
            /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
            helpText?: string;
            /**
             * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
             * @default text
             */
            type?: string;
            /** @description Default value of the data variable */
            default: string;
            /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
            order?: number;
        };
        /**
         * @deprecated
         * @description Data definitions attached to this component. The property name is the key of the data in the data document.
         * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
         */
        DataResourceDefinitions: {
            [key: string]: components$2["schemas"]["DataResourceDefinition"];
        };
        /**
         * @deprecated
         * @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters
         */
        DataResourceDefinition: {
            /** @description Public ID of the data type that provides this data */
            type: string;
            /** @description Whether this data is a pattern parameter that has to be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
            isPatternParameter?: boolean;
            variables?: components$2["schemas"]["DataResourceVariables"];
        };
        /**
         * @deprecated
         * @description Variable values for a data resource.
         */
        DataResourceVariables: {
            [key: string]: string;
        };
        /** @description Project map node information related to a component. */
        CompositionProjectMapNodeInfo: {
            /**
             * Format: uuid
             * @description Unique identifier for the project map node
             */
            id: string;
            /** @description Path of the project map node */
            path: string;
            /**
             * Format: uuid
             * @description Unique identifier for the project map that this node belongs to.
             */
            projectMapId: string;
        };
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$4 {
    "/api/v1/canvas-definitions": {
        get: {
            parameters: {
                query: {
                    /** The project ID to get component definitions for. */
                    projectId: string;
                    /** Limit list to one result by ID (response remains an array). */
                    componentId?: string;
                    /** Number of records to skip */
                    offset?: number;
                    /** Max number of records to return */
                    limit?: number;
                    /** Whether to fetch system meta-component definitions (personalize, test, etc) */
                    includeSystem?: boolean;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            /** @description Component definitions that match the query */
                            componentDefinitions: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinition"][];
                        };
                    };
                };
                400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        /** Upserts a component definition */
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description The project ID to upsert the component definition to
                         */
                        projectId: string;
                        componentDefinition: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinition"];
                    };
                };
            };
        };
        /** Deletes a component definition */
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The public ID of the component definition to delete */
                        componentId: string;
                        /**
                         * Format: uuid
                         * @description The ID of the project the composition to delete belongs to
                         */
                        projectId: string;
                    };
                };
            };
        };
        /** Handles preflight requests. This endpoint allows CORS. */
        options: {
            responses: {
                /** OK */
                204: never;
            };
        };
    };
}
interface external$5 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a connection to a data element on a data resource. Do not use.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                    /**
                     * @description Whether an error should occur if the connected data element cannot be resolved (i.e. a missing property in the data resource).
                     * In all cases the binding process will remove the parameter data for the unresolvable data element.
                     * When this is true, and the data element failed to bind, the warning entry returned from the binding process will be changed to an error entry.
                     *
                     * @default false
                     */
                    required?: boolean;
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description Unique identifier of the component within the composition. This is not set unless specifically requested via `withComponentIDs` API parameter. */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @deprecated
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _data during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                };
                /**
                 * @deprecated
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project.
                 */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description Defines the shape of a data variable on a Data Source or Data Type
                 */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @deprecated
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters
                 */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern parameter that has to be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    variables?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /**
                 * @deprecated
                 * @description Variable values for a data resource.
                 */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

type SharedComponents$1 = components$2['schemas'];
type Api$1 = paths$4['/api/v1/canvas-definitions'];
/** Shape of the GET response from /api/v1/canvas-definitions */
type ComponentDefinitionGetResponse = Api$1['get']['responses']['200']['content']['application/json'];
/** Shape of the PUT request body for /api/v1/canvas-definitions */
type ComponentDefinitionPutParameters = Api$1['put']['requestBody']['content']['application/json'];
/** Shape of the DELETE request body for /api/v1/canvas-definitions */
type ComponentDefinitionDeleteParameters = Api$1['delete']['requestBody']['content']['application/json'];
/** Query parameter options for GET /api/v1/canvas-definitions */
type ComponentDefinitionGetParameters = Api$1['get']['parameters']['query'];
/** @deprecated use ComponentDefinitionGetResponse instead */
type ComponentDefinitionAPIResponse = ComponentDefinitionGetResponse;
/** @deprecated use ComponentDefinitionPutParameters */
type ComponentDefinitionAPIPutRequest = ComponentDefinitionPutParameters;
/** @deprecated use ComponentDefinitionDeleteParameters */
type ComponentDefinitionAPIDeleteRequest = ComponentDefinitionDeleteParameters;
/** @deprecated use ComponentDefinitionGetParameters */
type ComponentDefinitionListAPIOptions = ComponentDefinitionGetParameters;
/** The definition of a component parameter */
type ComponentDefinitionParameter<TConfig = unknown> = Omit<components$2['schemas']['ComponentDefinitionParameter'], 'typeConfig'> & {
    typeConfig?: TConfig;
};
/** The definition of a component visual variant */
type ComponentDefinitionVariant = SharedComponents$1['ComponentDefinitionVariant'];
/** The definition of a composition's slug settings */
type ComponentDefinitionSlugSettings = SharedComponents$1['ComponentDefinitionSlugSettings'];
/** The definition of a named component slot that can contain other components */
type ComponentDefinitionSlot = SharedComponents$1['ComponentDefinitionSlot'];
/** Permission set for a component defintion */
type ComponentDefinitionPermission = SharedComponents$1['ComponentDefinitionPermission'];
/** Defines a component type that can live on a Composition */
type ComponentDefinition = SharedComponents$1['ComponentDefinition'];
/** @deprecated use ComponentDefinition instead */
type CreatingComponentDefinition = Omit<Partial<ComponentDefinition>, 'created' | 'updated'>;

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$3 {
    "/api/v1/canvas": {
        get: {
            parameters: {
                query: {
                    /** Specify a single composition ID to fetch. Changes response from list to single. */
                    compositionId?: components$1["parameters"]["compositionId"];
                    /** Specify multiple composition IDs to fetch. Response type will be a list. */
                    compositionIDs?: components$1["parameters"]["compositionIDs"];
                    /** Filters composition lists by the user who created them. The user is specified by their identity subject. */
                    createdBy?: components$1["parameters"]["createdBy"];
                    /**
                     * Matches compositions where their name, slug, or definition name contains the specified keyword.
                     * NOT a full text search; does not match composition contents.
                     */
                    keyword?: components$1["parameters"]["keyword"];
                    /** Max number of records to return */
                    limit?: components$1["parameters"]["limit"];
                    /** Number of records to skip */
                    offset?: components$1["parameters"]["offset"];
                    /** Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
                    orderBy?: components$1["parameters"]["orderBy"];
                    /**
                     * Matches compositions based on whether they are a pattern composition or a regular composition.
                     * If true, only pattern compositions will be returned.
                     * If false, only regular compositions will be returned.
                     * If omitted, both pattern and regular compositions will be returned.
                     */
                    pattern?: components$1["parameters"]["pattern"];
                    /** The project the composition(s) are on. */
                    projectId: components$1["parameters"]["projectId"];
                    /** Required when using project map node id or path for fetch. */
                    projectMapId?: components$1["parameters"]["projectMapId"];
                    /** Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
                    projectMapNodeId?: components$1["parameters"]["projectMapNodeId"];
                    /** Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
                    projectMapNodePath?: components$1["parameters"]["projectMapNodePath"];
                    /**
                     * @deprecated Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
                     * This improves performance if you do not require enhanced component data.
                     * If calling the Canvas API directly with no enhancer proxy, this has no effect.
                     */
                    skipEnhance?: components$1["parameters"]["skipEnhance"];
                    /**
                     * If true, any pattern references in the composition will be left unresolved.
                     * This is appropriate if you intend to serialize the composition without patterns
                     * embedded into it, and serialize the pattern data separately.
                     */
                    skipPatternResolution?: components$1["parameters"]["skipPatternResolution"];
                    /** If true, any dynamic parameters will be left with their raw data.  Project map link path is a dynamic parameter. */
                    skipParameterResolution?: components$1["parameters"]["skipParameterResolution"];
                    /** Specify a single composition to fetch by slug. Changes response from list to single. */
                    slug?: components$1["parameters"]["slug"];
                    /** State of compositions to fetch. 0 = draft, 64 = published. */
                    state?: components$1["parameters"]["state"];
                    /** The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
                    type?: components$1["parameters"]["type"];
                    /**
                     * @deprecated Filters composition lists by the UI status of the composition.
                     * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                     */
                    uiStatus?: components$1["parameters"]["uiStatus"];
                    /** Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
                    updatedBy?: components$1["parameters"]["updatedBy"];
                    /**
                     * If true the `_id` unique identifier of each non-root component will be part of the response data.
                     * If false, the `_id` will not be present in the API response.
                     */
                    withComponentIDs?: components$1["parameters"]["withComponentIDs"];
                    /**
                     * Controls whether the total count of results will be returned along with the current results page in a list.
                     * Has no effect when not fetching a list. This does impact performance when enabled.
                     */
                    withTotalCount?: components$1["parameters"]["withTotalCount"];
                    /**
                     * @deprecated Returns the UI status string of the composition.
                     * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                     */
                    withUIStatus?: components$1["parameters"]["withUIStatus"];
                    /** Includes project map node information in the composition results */
                    withProjectMapNodes?: components$1["parameters"]["withProjectMapNodes"];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components$1["schemas"]["CompositionListResponse"] | components$1["schemas"]["CompositionApiResponse"];
                    };
                };
                400: external$4["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$4["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$4["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                /** Composition not found */
                404: {
                    content: {
                        "text/plain": string;
                    };
                };
                429: external$4["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$4["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        /** Upserts a composition */
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$4["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$4["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$4["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$4["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$4["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description The project ID to upsert the composition to
                         */
                        projectId: string;
                        /** @description The state of the composition to upsert into. 0 = draft, 64 = published */
                        state: number;
                        composition: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
                        /**
                         * @description True if the composition is a pattern (which can be referenced on other compositions)
                         * @default false
                         */
                        pattern?: boolean;
                        /** @description Ignored if present */
                        created?: string;
                        /** @description Ignored if present */
                        modified?: string;
                    };
                };
            };
        };
        /** Deletes or unpublishes a composition */
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$4["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$4["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$4["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$4["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$4["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description The ID of the composition to delete
                         */
                        compositionId: string;
                        /**
                         * Format: uuid
                         * @description The ID of the project the composition to delete belongs to
                         */
                        projectId: string;
                        /** @description The state of the composition to delete (0 = draft, 64 = published [causes unpublishing], unspecified = all) */
                        state?: number;
                    };
                };
            };
        };
        /** Handles preflight requests. This endpoint allows CORS. */
        options: {
            responses: {
                /** OK */
                204: never;
            };
        };
    };
}
interface components$1 {
    schemas: {
        CompositionApiResponse: {
            /** @description State of compositions to fetch. 0 = draft, 64 = published. */
            state: number;
            /**
             * @deprecated
             * @description UI status value. Subject to change without notice; do not rely on this value. Only present when `withUIStatus` option is true.
             * @enum {string}
             */
            uiStatus?: "Draft" | "Modified" | "Published" | "Orphan";
            /**
             * Format: uuid
             * @description The project ID that this layout data is part of
             */
            projectId: string;
            /**
             * Format: date-time,
             * @description Created date string for this definition
             */
            created: string;
            /**
             * Format: date-time,
             * @description Modified date string for this definition
             */
            modified: string;
            /** @description Whether this composition is a pattern (can be referenced by other compositions, not treated as a composition) */
            pattern: boolean;
            composition: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
        };
        CompositionListResponse: {
            compositions: components$1["schemas"]["CompositionApiResponse"][];
            /** @description Total number of compositions that match the query. Only present when `withTotalCount` option is true. */
            totalCount?: number;
        };
    };
    parameters: {
        /** @description The project the composition(s) are on. */
        projectId: string;
        /** @description Specify a single composition ID to fetch. Changes response from list to single. */
        compositionId: string;
        /** @description Specify multiple composition IDs to fetch. Response type will be a list. */
        compositionIDs: string[];
        /** @description Specify a single composition to fetch by slug. Changes response from list to single. */
        slug: string;
        /** @description Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
        projectMapNodeId: string;
        /** @description Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
        projectMapNodePath: string;
        /** @description Required when using project map node id or path for fetch. */
        projectMapId: string;
        /** @description The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
        type: string[];
        /** @description State of compositions to fetch. 0 = draft, 64 = published. */
        state: number;
        /** @description Number of records to skip */
        offset: number;
        /** @description Max number of records to return */
        limit: number;
        /**
         * @deprecated
         * @description Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
         * This improves performance if you do not require enhanced component data.
         * If calling the Canvas API directly with no enhancer proxy, this has no effect.
         */
        skipEnhance: boolean;
        /**
         * @description If true, any pattern references in the composition will be left unresolved.
         * This is appropriate if you intend to serialize the composition without patterns
         * embedded into it, and serialize the pattern data separately.
         */
        skipPatternResolution: boolean;
        /** @description If true, any dynamic parameters will be left with their raw data.  Project map link path is a dynamic parameter. */
        skipParameterResolution: boolean;
        /**
         * @description If true the `_id` unique identifier of each non-root component will be part of the response data.
         * If false, the `_id` will not be present in the API response.
         */
        withComponentIDs: boolean;
        /**
         * @description Matches compositions where their name, slug, or definition name contains the specified keyword.
         * NOT a full text search; does not match composition contents.
         */
        keyword: string;
        /**
         * @description Matches compositions based on whether they are a pattern composition or a regular composition.
         * If true, only pattern compositions will be returned.
         * If false, only regular compositions will be returned.
         * If omitted, both pattern and regular compositions will be returned.
         */
        pattern: boolean;
        /** @description Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
        orderBy: ("updated_at_DESC" | "updated_at_ASC" | "created_at_DESC" | "created_at_ASC" | "name_DESC" | "name_ASC" | "slug_DESC" | "slug_ASC")[];
        /**
         * @deprecated
         * @description Returns the UI status string of the composition.
         * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
         */
        withUIStatus: boolean;
        /**
         * @deprecated
         * @description Filters composition lists by the UI status of the composition.
         * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
         */
        uiStatus: ("Draft" | "Modified" | "Published" | "Orphan")[];
        /** @description Includes project map node information in the composition results */
        withProjectMapNodes: boolean;
        /** @description Filters composition lists by the user who created them. The user is specified by their identity subject. */
        createdBy: string;
        /** @description Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
        updatedBy: string;
        /**
         * @description Controls whether the total count of results will be returned along with the current results page in a list.
         * Has no effect when not fetching a list. This does impact performance when enabled.
         */
        withTotalCount: boolean;
    };
}
interface external$4 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a connection to a data element on a data resource. Do not use.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                    /**
                     * @description Whether an error should occur if the connected data element cannot be resolved (i.e. a missing property in the data resource).
                     * In all cases the binding process will remove the parameter data for the unresolvable data element.
                     * When this is true, and the data element failed to bind, the warning entry returned from the binding process will be changed to an error entry.
                     *
                     * @default false
                     */
                    required?: boolean;
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description Unique identifier of the component within the composition. This is not set unless specifically requested via `withComponentIDs` API parameter. */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @deprecated
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _data during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                };
                /**
                 * @deprecated
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project.
                 */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description Defines the shape of a data variable on a Data Source or Data Type
                 */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @deprecated
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters
                 */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern parameter that has to be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    variables?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /**
                 * @deprecated
                 * @description Variable values for a data resource.
                 */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

interface components {
    schemas: {
        EdgehancersError: {
            message: string;
            status: number;
            statusText: string;
        };
        UniformError: components["schemas"]["EdgehancersError"] | external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
        InvalidationPayload: {
            variables?: {
                name: string;
                value: string;
            }[];
        };
        DataDiagnostic: {
            componentPath: string;
            dataType: string;
            dataName: string;
            performance: {
                cacheHit: boolean;
                total: number;
                retryCount: number;
                retryDelay: number;
                sourceCache?: string;
            };
            data: unknown;
        };
        CompositionIssue: {
            componentPath: string;
            componentType: string;
            message: string;
            type: string;
        };
        InvalidationResult: {
            ok: boolean;
            input: {
                /** Format: uuid */
                projectId: string;
                /** Format: uuid */
                dataTypeId: string;
                dataVariable?: {
                    name: string;
                    value: string;
                };
            };
        };
    };
    responses: {
        /** Invalid caller input came with the request */
        BadRequestError: {
            content: {
                "application/json": components["schemas"]["UniformError"];
            };
        };
        UnauthorizedError: {
            content: {
                "application/json": components["schemas"]["UniformError"];
            };
        };
        ForbiddenError: {
            content: {
                "application/json": components["schemas"]["UniformError"];
            };
        };
        /** The requested resource does not exist */
        NotFoundError: {
            content: {
                "application/json": components["schemas"]["UniformError"];
            };
        };
        /** Invalid method was used to call the endpoint */
        MethodNotAllowedError: {
            content: {
                "application/json": components["schemas"]["UniformError"];
            };
        };
        /** The request body could not be parsed or understood */
        UnprocessableEntityError: {
            content: {
                "application/json": components["schemas"]["UniformError"];
            };
        };
        RateLimitError: {
            content: {
                "application/json": components["schemas"]["UniformError"];
            };
        };
        /** An unexpected error occurred */
        InternalServerError: {
            content: {
                "application/json": components["schemas"]["UniformError"];
            };
        };
        CompositionResult: {
            content: {
                "application/json": {
                    dataDiagnostics?: components["schemas"]["DataDiagnostic"][];
                    errors?: components["schemas"]["CompositionIssue"][];
                    warnings?: components["schemas"]["CompositionIssue"][];
                } & external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"];
            };
        };
        /** Invalidation request was processed; ok indicates if it succeeded */
        InvalidationResult: {
            content: {
                "application/json": components["schemas"]["InvalidationResult"];
            };
        };
    };
}
interface external$3 {
    "../../../lambda/functions/swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "../../../lambda/functions/uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a connection to a data element on a data resource. Do not use.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                    /**
                     * @description Whether an error should occur if the connected data element cannot be resolved (i.e. a missing property in the data resource).
                     * In all cases the binding process will remove the parameter data for the unresolvable data element.
                     * When this is true, and the data element failed to bind, the warning entry returned from the binding process will be changed to an error entry.
                     *
                     * @default false
                     */
                    required?: boolean;
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description Unique identifier of the component within the composition. This is not set unless specifically requested via `withComponentIDs` API parameter. */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @deprecated
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _data during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                };
                /**
                 * @deprecated
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project.
                 */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description Defines the shape of a data variable on a Data Source or Data Type
                 */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @deprecated
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters
                 */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern parameter that has to be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    variables?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /**
                 * @deprecated
                 * @description Variable values for a data resource.
                 */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
    "../../../lambda/functions/v1-canvas.swagger.yml": {
        paths: {
            "/api/v1/canvas": {
                get: {
                    parameters: {
                        query: {
                            /** Specify a single composition ID to fetch. Changes response from list to single. */
                            compositionId?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["compositionId"];
                            /** Specify multiple composition IDs to fetch. Response type will be a list. */
                            compositionIDs?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["compositionIDs"];
                            /** Filters composition lists by the user who created them. The user is specified by their identity subject. */
                            createdBy?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["createdBy"];
                            /**
                             * Matches compositions where their name, slug, or definition name contains the specified keyword.
                             * NOT a full text search; does not match composition contents.
                             */
                            keyword?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["keyword"];
                            /** Max number of records to return */
                            limit?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["limit"];
                            /** Number of records to skip */
                            offset?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["offset"];
                            /** Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
                            orderBy?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["orderBy"];
                            /**
                             * Matches compositions based on whether they are a pattern composition or a regular composition.
                             * If true, only pattern compositions will be returned.
                             * If false, only regular compositions will be returned.
                             * If omitted, both pattern and regular compositions will be returned.
                             */
                            pattern?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["pattern"];
                            /** The project the composition(s) are on. */
                            projectId: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["projectId"];
                            /** Required when using project map node id or path for fetch. */
                            projectMapId?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["projectMapId"];
                            /** Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
                            projectMapNodeId?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["projectMapNodeId"];
                            /** Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
                            projectMapNodePath?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["projectMapNodePath"];
                            /**
                             * @deprecated Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
                             * This improves performance if you do not require enhanced component data.
                             * If calling the Canvas API directly with no enhancer proxy, this has no effect.
                             */
                            skipEnhance?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["skipEnhance"];
                            /**
                             * If true, any pattern references in the composition will be left unresolved.
                             * This is appropriate if you intend to serialize the composition without patterns
                             * embedded into it, and serialize the pattern data separately.
                             */
                            skipPatternResolution?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["skipPatternResolution"];
                            /** If true, any dynamic parameters will be left with their raw data.  Project map link path is a dynamic parameter. */
                            skipParameterResolution?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["skipParameterResolution"];
                            /** Specify a single composition to fetch by slug. Changes response from list to single. */
                            slug?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["slug"];
                            /** State of compositions to fetch. 0 = draft, 64 = published. */
                            state?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["state"];
                            /** The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
                            type?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["type"];
                            /**
                             * @deprecated Filters composition lists by the UI status of the composition.
                             * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                             */
                            uiStatus?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["uiStatus"];
                            /** Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
                            updatedBy?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["updatedBy"];
                            /**
                             * If true the `_id` unique identifier of each non-root component will be part of the response data.
                             * If false, the `_id` will not be present in the API response.
                             */
                            withComponentIDs?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["withComponentIDs"];
                            /**
                             * Controls whether the total count of results will be returned along with the current results page in a list.
                             * Has no effect when not fetching a list. This does impact performance when enabled.
                             */
                            withTotalCount?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["withTotalCount"];
                            /**
                             * @deprecated Returns the UI status string of the composition.
                             * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                             */
                            withUIStatus?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["withUIStatus"];
                            /** Includes project map node information in the composition results */
                            withProjectMapNodes?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["withProjectMapNodes"];
                        };
                    };
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionListResponse"] | external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"];
                            };
                        };
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        /** Composition not found */
                        404: {
                            content: {
                                "text/plain": string;
                            };
                        };
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                };
                /** Upserts a composition */
                put: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /**
                                 * Format: uuid
                                 * @description The project ID to upsert the composition to
                                 */
                                projectId: string;
                                /** @description The state of the composition to upsert into. 0 = draft, 64 = published */
                                state: number;
                                composition: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
                                /**
                                 * @description True if the composition is a pattern (which can be referenced on other compositions)
                                 * @default false
                                 */
                                pattern?: boolean;
                                /** @description Ignored if present */
                                created?: string;
                                /** @description Ignored if present */
                                modified?: string;
                            };
                        };
                    };
                };
                /** Deletes or unpublishes a composition */
                delete: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /**
                                 * Format: uuid
                                 * @description The ID of the composition to delete
                                 */
                                compositionId: string;
                                /**
                                 * Format: uuid
                                 * @description The ID of the project the composition to delete belongs to
                                 */
                                projectId: string;
                                /** @description The state of the composition to delete (0 = draft, 64 = published [causes unpublishing], unspecified = all) */
                                state?: number;
                            };
                        };
                    };
                };
                /** Handles preflight requests. This endpoint allows CORS. */
                options: {
                    responses: {
                        /** OK */
                        204: never;
                    };
                };
            };
        };
        components: {
            schemas: {
                CompositionApiResponse: {
                    /** @description State of compositions to fetch. 0 = draft, 64 = published. */
                    state: number;
                    /**
                     * @deprecated
                     * @description UI status value. Subject to change without notice; do not rely on this value. Only present when `withUIStatus` option is true.
                     * @enum {string}
                     */
                    uiStatus?: "Draft" | "Modified" | "Published" | "Orphan";
                    /**
                     * Format: uuid
                     * @description The project ID that this layout data is part of
                     */
                    projectId: string;
                    /**
                     * Format: date-time,
                     * @description Created date string for this definition
                     */
                    created: string;
                    /**
                     * Format: date-time,
                     * @description Modified date string for this definition
                     */
                    modified: string;
                    /** @description Whether this composition is a pattern (can be referenced by other compositions, not treated as a composition) */
                    pattern: boolean;
                    composition: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
                };
                CompositionListResponse: {
                    compositions: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"][];
                    /** @description Total number of compositions that match the query. Only present when `withTotalCount` option is true. */
                    totalCount?: number;
                };
            };
            parameters: {
                /** @description The project the composition(s) are on. */
                projectId: string;
                /** @description Specify a single composition ID to fetch. Changes response from list to single. */
                compositionId: string;
                /** @description Specify multiple composition IDs to fetch. Response type will be a list. */
                compositionIDs: string[];
                /** @description Specify a single composition to fetch by slug. Changes response from list to single. */
                slug: string;
                /** @description Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
                projectMapNodeId: string;
                /** @description Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
                projectMapNodePath: string;
                /** @description Required when using project map node id or path for fetch. */
                projectMapId: string;
                /** @description The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
                type: string[];
                /** @description State of compositions to fetch. 0 = draft, 64 = published. */
                state: number;
                /** @description Number of records to skip */
                offset: number;
                /** @description Max number of records to return */
                limit: number;
                /**
                 * @deprecated
                 * @description Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
                 * This improves performance if you do not require enhanced component data.
                 * If calling the Canvas API directly with no enhancer proxy, this has no effect.
                 */
                skipEnhance: boolean;
                /**
                 * @description If true, any pattern references in the composition will be left unresolved.
                 * This is appropriate if you intend to serialize the composition without patterns
                 * embedded into it, and serialize the pattern data separately.
                 */
                skipPatternResolution: boolean;
                /** @description If true, any dynamic parameters will be left with their raw data.  Project map link path is a dynamic parameter. */
                skipParameterResolution: boolean;
                /**
                 * @description If true the `_id` unique identifier of each non-root component will be part of the response data.
                 * If false, the `_id` will not be present in the API response.
                 */
                withComponentIDs: boolean;
                /**
                 * @description Matches compositions where their name, slug, or definition name contains the specified keyword.
                 * NOT a full text search; does not match composition contents.
                 */
                keyword: string;
                /**
                 * @description Matches compositions based on whether they are a pattern composition or a regular composition.
                 * If true, only pattern compositions will be returned.
                 * If false, only regular compositions will be returned.
                 * If omitted, both pattern and regular compositions will be returned.
                 */
                pattern: boolean;
                /** @description Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
                orderBy: ("updated_at_DESC" | "updated_at_ASC" | "created_at_DESC" | "created_at_ASC" | "name_DESC" | "name_ASC" | "slug_DESC" | "slug_ASC")[];
                /**
                 * @deprecated
                 * @description Returns the UI status string of the composition.
                 * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                 */
                withUIStatus: boolean;
                /**
                 * @deprecated
                 * @description Filters composition lists by the UI status of the composition.
                 * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                 */
                uiStatus: ("Draft" | "Modified" | "Published" | "Orphan")[];
                /** @description Includes project map node information in the composition results */
                withProjectMapNodes: boolean;
                /** @description Filters composition lists by the user who created them. The user is specified by their identity subject. */
                createdBy: string;
                /** @description Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
                updatedBy: string;
                /**
                 * @description Controls whether the total count of results will be returned along with the current results page in a list.
                 * Has no effect when not fetching a list. This does impact performance when enabled.
                 */
                withTotalCount: boolean;
            };
        };
        operations: {};
    };
}

type Components = components$1['schemas'];
type SharedComponents = components$2['schemas'];
type Api = paths$3['/api/v1/canvas'];
/** Query parameter options for GET /api/v1/canvas */
type CompositionGetParameters = Omit<Api['get']['parameters']['query'], 'type'> & {
    type?: string | string[];
};
type CompositionGetOrderBy = NonNullable<Api['get']['parameters']['query']['orderBy']>[0];
/** The GET response from /api/v1/canvas when `component` or `slug` params are specified */
type CompositionGetResponse = Components['CompositionApiResponse'];
/** @deprecated - internal use, do not rely on this value */
type CompositionUIStatus = NonNullable<Components['CompositionApiResponse']['uiStatus']>;
/** The GET response from /api/v1/canvas when `component` or `slug` are not specified */
type CompositionGetListResponse = Components['CompositionListResponse'];
/** The PUT request body for /api/v1/canvas */
type CompositionPutParameters = Api['put']['requestBody']['content']['application/json'];
/** Shape of the DELETE request body for /api/v1/canvas */
type CompositionDeleteParameters = Api['delete']['requestBody']['content']['application/json'];
/** @deprecated use CompositionGetResponse */
type CompositionAPIResponse = CompositionGetResponse;
/** @deprecated use CompositionDeleteParameters */
type CompositionAPIDeleteRequest = CompositionDeleteParameters;
/** @deprecated use CompositionGetParameters */
type CompositionListAPIResponse = CompositionGetListResponse;
/** @deprecated use CompositionGetParameters */
type CompositionAPIOptions = CompositionGetParameters;
/** Defines an editable parameter on a component. */
type ComponentParameter<TValue = unknown> = Omit<SharedComponents['ComponentParameter'], 'value'> & {
    /** The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
    value: TValue;
};
/** Defines a connection to a data element on a data resource. */
type DataElementConnectionDefinition = SharedComponents['DataElementConnectionDefinition'];
/** Variable values for a data resource. */
type DataResourceVariables = SharedComponents['DataResourceVariables'];
/**
 * Data definitions attached to this component. The property name is the key of the data in the data document.
 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
 */
type DataResourceDefinitions = SharedComponents['DataResourceDefinitions'];
/** Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
type DataResourceDefinition = SharedComponents['DataResourceDefinition'];
/** Defines the shape of a component instance served by the composition API. */
type ComponentInstance = SharedComponents['ComponentInstance'] & {
    /** Data for the component instance, provided by a component enhancer. Never set in unenhanced data. */
    data?: Record<string, unknown>;
};
/** Defines the shape of the root component in a composition */
type RootComponentInstance = SharedComponents['RootComponentInstance'];
/** Defines single structure to keep all canvas models (used in CLI commands and Starter content generations) */
type CanvasDefinitions = {
    components?: Array<ComponentDefinition>;
    compositions?: Array<CompositionGetResponse>;
    dataTypes?: Array<DataType>;
};
/** Defines shared parameters for requests getting a single composition */
type CompositionGetOneSharedParameters = Pick<CompositionGetParameters, 'state' | 'skipEnhance' | 'skipPatternResolution' | 'withComponentIDs' | 'withUIStatus' | 'withTotalCount'>;
type CompositionGetBy<RequiredParameters extends keyof CompositionGetParameters> = CompositionGetOneSharedParameters & Required<Pick<CompositionGetParameters, RequiredParameters>>;
/** Defines exact parameters for specific requests getting a single composition */
type CompositionGetByNodePathParameters = CompositionGetBy<'projectMapNodePath' | 'projectMapId'>;
type CompositionGetByNodeIdParameters = CompositionGetBy<'projectMapNodeId' | 'projectMapId'>;
type CompositionGetBySlugParameters = CompositionGetBy<'slug'>;
type CompositionGetByIdParameters = CompositionGetBy<'compositionId'>;
/** Switches for data resolution */
type DataResolutionOption = {
    unstable_resolveData?: boolean;
};
type DataResolutionOptionNegative = {
    unstable_resolveData?: false;
};
type DataResolutionOptionPositive = {
    unstable_resolveData: true;
};
type DataResolutionParameters = {
    /**
     * Adds additional diagnostics (`dataDiagnostics`) to the response containing timings and resolved datas for the composition.
     * Because this adds a lot of data to the response, we do not recommend using this unless diagnosing performance issues.
     */
    unstable_dataDiagnostics?: boolean;
    /**
     * Pass dynamic variables to the composition that are required for resolving bindings and datas,
     * such as language, detail page ID, etc.
     */
    unstable_dynamicVariables?: Record<string, string>;
};
/** Types of issue that can occur when fetching composition data */
type CompositionIssue = CompositionPatternIssue | DataResourceIssue | DataElementBindingIssue | DataResourceVariableIssue | DataResolutionConfigIssue;
type CompositionIssueCore = components['schemas']['CompositionIssue'];
/** An error that occured resolving a pattern that is referenced on the composition */
type CompositionPatternIssue = CompositionIssueCore & {
    type: 'pattern';
    code: NonNullable<ComponentInstance['_patternError']>;
};
/** An error while binding a data element from a data resource to a component parameter (i.e. a missing property in the data resource) */
type DataElementBindingIssue = CompositionIssueCore & {
    type: 'binding';
    parameterName: string;
};
/** An error that occurred fetching a data defined on the composition or a pattern within */
type DataResourceIssue = CompositionIssueCore & {
    type: 'data';
    dataName: string;
    dataType: string;
};
/** An issue that occurred while binding dynamic variables to composition data resources */
type DataResourceVariableIssue = CompositionIssueCore & {
    type: 'variable';
    variableName: string;
};
type DataResolutionConfigIssue = {
    message: string;
    type: 'config';
};
/** Diagnostic data about the load performance of attached composition datas */
type CompositionDataDiagnostic = components['schemas']['DataDiagnostic'];
/** Response as it comes from the data resolution endpoint */
type CompositionResolvedGetResponse = CompositionGetResponse & {
    /**
     * Copies of resolved data and how long it took to resolve each data.
     * Only set when dataDiagnostics=true is passed to the options.
     */
    dataDiagnostics?: Array<CompositionDataDiagnostic>;
    /**
     * Any failures to bind to data that occured on bindings marked 'must exist'.
     * If no failures occurred, this will be undefined.
     * NOTE: No exception will be thrown if this type of error occurs. You must inspect this property if you care to cause client errors.
     */
    errors?: Array<CompositionIssue>;
    /**
     * Any failures to bind to data that occurred on optional bindings. In most cases, these are only informational (i.e. data is bound to a property that does not always exist)
     * If no failures occurred, this will be undefined.
     */
    warnings?: Array<CompositionIssue>;
};
/** All valid response types */
type CompositionGetValidResponses = CompositionGetResponse | CompositionResolvedGetResponse;

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$2 {
    "/api/v1/data-source": {
        get: {
            parameters: {
                query: {
                    dataSourceId: string;
                    projectId: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            result: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataSource"];
                        };
                    };
                };
                400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        data: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataSource"];
                        /** Format: uuid */
                        projectId: string;
                        /**
                         * Format: uuid
                         * @deprecated
                         * @description Do not use. Will be removed in future.
                         */
                        integrationId?: string;
                        /** @description The integration type that the data source is attached to. Must be installed in the project. */
                        integrationType?: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        dataSourceId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface external$2 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a connection to a data element on a data resource. Do not use.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                    /**
                     * @description Whether an error should occur if the connected data element cannot be resolved (i.e. a missing property in the data resource).
                     * In all cases the binding process will remove the parameter data for the unresolvable data element.
                     * When this is true, and the data element failed to bind, the warning entry returned from the binding process will be changed to an error entry.
                     *
                     * @default false
                     */
                    required?: boolean;
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description Unique identifier of the component within the composition. This is not set unless specifically requested via `withComponentIDs` API parameter. */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @deprecated
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _data during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                };
                /**
                 * @deprecated
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project.
                 */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description Defines the shape of a data variable on a Data Source or Data Type
                 */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @deprecated
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters
                 */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern parameter that has to be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    variables?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /**
                 * @deprecated
                 * @description Variable values for a data resource.
                 */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$1 {
    "/api/v1/data-sources": {
        get: {
            parameters: {
                query: {
                    projectId: string;
                };
            };
            responses: {
                /**
                 * Gets a list of data sources.
                 * Note that all parameters, headers, and variables will have the value 'SECRET', as this endpoint
                 * requires minimal permissions. To decrypt secrets, you must be an admin or manage-data-sources privileged
                 * user, and fetch using the `data-source` endpoint for each data source.
                 */
                200: {
                    content: {
                        "application/json": {
                            results: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataSource"][];
                        };
                    };
                };
                400: external$1["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$1["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$1["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$1["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$1["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
    };
}
interface external$1 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a connection to a data element on a data resource. Do not use.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                    /**
                     * @description Whether an error should occur if the connected data element cannot be resolved (i.e. a missing property in the data resource).
                     * In all cases the binding process will remove the parameter data for the unresolvable data element.
                     * When this is true, and the data element failed to bind, the warning entry returned from the binding process will be changed to an error entry.
                     *
                     * @default false
                     */
                    required?: boolean;
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description Unique identifier of the component within the composition. This is not set unless specifically requested via `withComponentIDs` API parameter. */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @deprecated
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _data during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                };
                /**
                 * @deprecated
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project.
                 */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description Defines the shape of a data variable on a Data Source or Data Type
                 */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @deprecated
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters
                 */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern parameter that has to be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    variables?: external$1["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /**
                 * @deprecated
                 * @description Variable values for a data resource.
                 */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths {
    "/api/v1/data-types": {
        get: {
            parameters: {
                query: {
                    projectId: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            results: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataType"][];
                        };
                    };
                };
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        data: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataType"];
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        typeId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface external {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a connection to a data element on a data resource. Do not use.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                    /**
                     * @description Whether an error should occur if the connected data element cannot be resolved (i.e. a missing property in the data resource).
                     * In all cases the binding process will remove the parameter data for the unresolvable data element.
                     * When this is true, and the data element failed to bind, the warning entry returned from the binding process will be changed to an error entry.
                     *
                     * @default false
                     */
                    required?: boolean;
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description Unique identifier of the component within the composition. This is not set unless specifically requested via `withComponentIDs` API parameter. */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @deprecated
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _data during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                };
                /**
                 * @deprecated
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project.
                 */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /**
                 * @deprecated
                 * @description Defines the shape of a data variable on a Data Source or Data Type
                 */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @deprecated
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /**
                 * @deprecated
                 * @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters
                 */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern parameter that has to be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    variables?: external["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /**
                 * @deprecated
                 * @description Variable values for a data resource.
                 */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

type DataTypeApi = paths['/api/v1/data-types'];
type DataSourcesApi = paths$1['/api/v1/data-sources'];
type DataSourceApi = paths$2['/api/v1/data-source'];
/** Query parameter options for GET /api/v1/data-types */
type DataTypeGetParameters = DataTypeApi['get']['parameters']['query'];
/** The GET response from /api/v1/data-types */
type DataTypeGetResponse = DataTypeApi['get']['responses']['200']['content']['application/json'];
/** The PUT request body for /api/v1/data-types */
type DataTypePutParameters = DataTypeApi['put']['requestBody']['content']['application/json'];
/** Shape of the DELETE request body for /api/v1/data-types */
type DataTypeDeleteParameters = DataTypeApi['delete']['requestBody']['content']['application/json'];
/** Query parameter options for GET /api/v1/data-source */
type DataSourceGetParameters = DataSourceApi['get']['parameters']['query'];
/** Query parameter options for GET /api/v1/data-sources */
type DataSourcesGetParameters = DataSourcesApi['get']['parameters']['query'];
/** The GET response from /api/v1/data-sources */
type DataSourceGetResponse = DataSourceApi['get']['responses']['200']['content']['application/json'];
/** The GET response from /api/v1/data-sources */
type DataSourcesGetResponse = DataSourcesApi['get']['responses']['200']['content']['application/json'];
/** The PUT request body for /api/v1/data-source */
type DataSourcePutParameters = DataSourceApi['put']['requestBody']['content']['application/json'];
/** Shape of the DELETE request body for /api/v1/data-source */
type DataSourceDeleteParameters = DataSourceApi['delete']['requestBody']['content']['application/json'];
type DataType = components$2['schemas']['DataType'];
type DataSource = components$2['schemas']['DataSource'];
type DataVariableDefinition = components$2['schemas']['DataVariableDefinition'];

interface ContextualEditingWindowData {
    framework?: ReadyMessage['framework'];
}
declare global {
    interface Window {
        __UNIFORM_CONTEXTUAL_EDITING__?: ContextualEditingWindowData;
    }
}
type SelectComponentMessage = {
    type: 'select-component';
    id: string;
};
type ReadyMessage = {
    type: 'ready';
    framework?: 'React' | 'Vue';
};
type UpdateCompositionMessage = {
    type: 'update-composition';
    composition: RootComponentInstance;
    hash: number | undefined;
};
type AddComponentMessage = {
    type: 'add-component';
    parentId: string;
    slotName: string;
    index: number;
};
type MoveComponentMessage = {
    type: 'move-component';
    componentId: string;
    slotName: string;
    index: number;
    direction: 'up' | 'down';
};
type DismissPlaceholderMessage = {
    type: 'dismiss-placeholder';
    parentId: string;
    slotName: string;
};
type ChannelMessage = SelectComponentMessage | ReadyMessage | UpdateCompositionMessage | AddComponentMessage | MoveComponentMessage | DismissPlaceholderMessage;
declare const isSelectComponentMessage: (message: ChannelMessage) => message is SelectComponentMessage;
declare const isReadyMessage: (message: ChannelMessage) => message is ReadyMessage;
declare const isUpdateCompositionMessage: (message: ChannelMessage) => message is UpdateCompositionMessage;
declare const isAddComponentMessage: (message: ChannelMessage) => message is AddComponentMessage;
declare const isMovingComponentMessage: (message: ChannelMessage) => message is MoveComponentMessage;
declare const isDismissPlaceholderMessage: (message: ChannelMessage) => message is DismissPlaceholderMessage;
type MessageHandler = (message: ChannelMessage, originalEvent: MessageEvent) => void;
type Channel = {
    ready: () => void;
    destroy: () => void;
    selectComponent: (id: string) => void;
    updateComposition: (component: RootComponentInstance, secret?: string) => void;
    on: (types: ChannelMessage['type'][] | ChannelMessage['type'], handler: MessageHandler) => () => void;
    addComponent: (options: Omit<AddComponentMessage, 'type'>) => void;
    moveComponent: (options: Omit<MoveComponentMessage, 'type'>) => void;
    dismissPlaceholder: (options: Omit<DismissPlaceholderMessage, 'type'>) => void;
};
declare const createCanvasChannel: ({ listenTo, broadcastTo, }: {
    listenTo: Window[];
    broadcastTo: Window[];
}) => Channel;

/**
 * Pusher-js is large (80k) and not tree shakable so it is always bundled if directly referenced,
 * when it's only needed during preview mode. To avoid bundling it for all, we use an old-school
 * write-a-script-tag hack to load it in a poor man's approximation of a dynamic import ;)
 */
type ChannelSubscription = {
    addEventHandler: (eventName: string, handler: (data: unknown) => void) => () => void;
    unsubscribe: () => void;
};
type PreviewEventBus = {
    subscribe: (channel: string) => ChannelSubscription;
};
declare global {
    interface Window {
        Pusher?: typeof Pusher;
        __UNIFORM_EVENT_BUS__?: PreviewEventBus;
    }
}
/**
 * Creates an event bus client to receive updates from Canvas
 * IMPORTANT: in a server-side context this will always return undefined
 * IMPORTANT: in a browser context this is cached in window and does not create multiple instances
 */
declare function createEventBus(): Promise<PreviewEventBus | undefined>;

export { ComponentDefinitionParameter as $, ReadyMessage as A, AddComponentMessage as B, CompositionGetParameters as C, DataResolutionOptionNegative as D, DismissPlaceholderMessage as E, ChannelMessage as F, isSelectComponentMessage as G, isReadyMessage as H, isUpdateCompositionMessage as I, isAddComponentMessage as J, isMovingComponentMessage as K, isDismissPlaceholderMessage as L, MoveComponentMessage as M, MessageHandler as N, Channel as O, PreviewEventBus as P, createCanvasChannel as Q, RootComponentInstance as R, SelectComponentMessage as S, ChannelSubscription as T, UpdateCompositionMessage as U, createEventBus as V, ComponentDefinitionGetResponse as W, ComponentDefinitionAPIResponse as X, ComponentDefinitionAPIPutRequest as Y, ComponentDefinitionAPIDeleteRequest as Z, ComponentDefinitionListAPIOptions as _, CompositionGetByNodePathParameters as a, ComponentDefinitionVariant as a0, ComponentDefinitionSlugSettings as a1, ComponentDefinitionSlot as a2, ComponentDefinitionPermission as a3, ComponentDefinition as a4, CreatingComponentDefinition as a5, CompositionGetOrderBy as a6, CompositionUIStatus as a7, CompositionGetListResponse as a8, CompositionAPIResponse as a9, CompositionAPIDeleteRequest as aa, CompositionListAPIResponse as ab, CompositionAPIOptions as ac, DataElementConnectionDefinition as ad, DataResourceVariables as ae, DataResourceDefinitions as af, DataResourceDefinition as ag, CanvasDefinitions as ah, CompositionIssue as ai, CompositionPatternIssue as aj, DataElementBindingIssue as ak, DataResourceIssue as al, DataResourceVariableIssue as am, DataResolutionConfigIssue as an, CompositionDataDiagnostic as ao, DataSourceGetResponse as ap, DataSourcesGetResponse as aq, DataType as ar, DataSource as as, DataVariableDefinition as at, CompositionGetResponse as b, DataResolutionOptionPositive as c, DataResolutionParameters as d, CompositionResolvedGetResponse as e, CompositionGetValidResponses as f, DataResolutionOption as g, CompositionGetByNodeIdParameters as h, CompositionGetBySlugParameters as i, CompositionGetByIdParameters as j, CompositionPutParameters as k, CompositionDeleteParameters as l, ComponentDefinitionGetParameters as m, ComponentDefinitionPutParameters as n, ComponentDefinitionDeleteParameters as o, ComponentInstance as p, ComponentParameter as q, components as r, DataSourceGetParameters as s, DataSourcesGetParameters as t, DataSourcePutParameters as u, DataSourceDeleteParameters as v, DataTypeGetParameters as w, DataTypeGetResponse as x, DataTypePutParameters as y, DataTypeDeleteParameters as z };
