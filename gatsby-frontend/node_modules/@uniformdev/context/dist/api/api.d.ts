import { A as AggregateGetParameters, a as AggregateGetResponse, b as AggregatePutParameters, c as AggregateDeleteParameters, D as DimensionDefinition, d as DimensionGetParameters, e as DimensionGetResponse, E as EnrichmentGetParameters, f as EnrichmentGetResponse, g as EnrichmentPutParameters, h as EnrichmentDeleteParameters, i as EnrichmentValuePutParameters, j as EnrichmentValueDeleteParameters, M as ManifestGetParameters, k as ManifestGetResponse, Q as QuirkGetParameters, l as QuirkGetResponse, m as QuirkPutParameters, n as QuirkDeleteParameters, S as SignalGetParameters, o as SignalGetResponse, p as SignalPutParameters, q as SignalDeleteParameters, T as TestGetParameters, r as TestGetResponse, s as TestPutParameters, t as TestDeleteParameters } from '../contextTypes-defd0c5d.js';
export { x as Aggregate, C as ContextDefinitions, F as CookieCriteria, J as CurrentPageCriteria, u as EnrichmentCategory, v as EnrichmentCategoryWithValues, w as EnrichmentValue, I as EventCriteria, P as PageViewCountCriteria, G as QueryStringCriteria, y as Quirk, H as QuirkCriteria, R as RootSignalCriteriaGroup, B as SignalWithId, z as Test } from '../contextTypes-defd0c5d.js';
import { I as ManifestV2 } from '../types-1c9fdbd2.js';
import '../v2-manifest.swagger-74a3dcac.js';
import 'mitt';

type LimitPolicy = <ReturnValue>(func: () => Promise<ReturnValue>) => Promise<ReturnValue>;
declare const nullLimitPolicy: LimitPolicy;
type ClientOptions = {
    /** The Uniform API host to use. Internal use. */
    apiHost?: string;
    /** The Uniform API key to use when sending API requests. This or bearer token must be specified. */
    apiKey?: string | null;
    /** The Uniform bearer token to use. Internal use. */
    bearerToken?: string | null;
    /** The Uniform project ID to connect to */
    projectId?: string | null;
    /** Specify a fetch implementation to use when fetching data. Useful if you want to only polyfill selectively. */
    fetch?: typeof fetch;
    /**
     * Specify how to retry and throttle requests.
     * Default: no limit policy.
     */
    limitPolicy?: LimitPolicy;
    /** Specify whether caching is disabled. */
    bypassCache?: boolean;
};
type ExceptProject<T> = Omit<T, 'projectId'>;
declare class ApiClientError extends Error {
    errorMessage: string;
    fetchMethod: string;
    fetchUri: string;
    statusCode?: number | undefined;
    statusText?: string | undefined;
    requestId?: string | undefined;
    constructor(errorMessage: string, fetchMethod: string, fetchUri: string, statusCode?: number | undefined, statusText?: string | undefined, requestId?: string | undefined);
}

declare class ApiClient<TOptions extends ClientOptions = ClientOptions> {
    protected options: TOptions;
    constructor(options: TOptions);
    protected apiClient<TResponse>(fetchUri: URL, options?: RequestInit & {
        /** Whether to expect a JSON response or not */
        expectNoContent?: boolean;
    }): Promise<TResponse>;
    protected createUrl(path: string, queryParams?: Record<string, string | boolean | undefined | null | number | Array<string | boolean | number>>, hostOverride?: string): URL;
    private ensureApiHost;
    private static getRequestId;
}
declare function handleRateLimits(callApi: () => Promise<Response>): Promise<Response>;

declare class AggregateClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all aggregates for a project */
    get(options?: ExceptProject<AggregateGetParameters>): Promise<AggregateGetResponse>;
    /** Updates or creates (based on id) an Aggregate */
    upsert(body: ExceptProject<AggregatePutParameters>): Promise<void>;
    /** Deletes an Aggregate */
    remove(body: ExceptProject<AggregateDeleteParameters>): Promise<void>;
}
declare class UncachedAggregateClient extends AggregateClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}
declare class CachedAggregateClient extends AggregateClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}

type DimensionDisplayData = {
    dim: string;
    type: 'Aggregate' | 'Enrichment' | 'Signal' | 'Intent' | 'Audience';
    category?: string;
    name: string;
};
declare function computeDimensionDefinitionDisplayData(dim: DimensionDefinition): DimensionDisplayData;
declare function computeDimensionDisplayData(dim: string, manifest: ManifestV2): DimensionDisplayData | undefined;
/** Computes the standard display name for a given dimension from the dimensions API */
declare function computeDimensionDisplayName(dim: DimensionDefinition): string;

declare class DimensionClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches the known score dimensions for a project */
    get(options?: ExceptProject<DimensionGetParameters>): Promise<DimensionGetResponse>;
}
declare class UncachedDimensionClient extends DimensionClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}
declare class CachedDimensionClient extends DimensionClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}

declare class EnrichmentClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all enrichments and values for a project, grouped by category */
    get(options?: ExceptProject<EnrichmentGetParameters>): Promise<EnrichmentGetResponse>;
    /** Updates or creates (based on id) an enrichment category */
    upsertCategory(body: ExceptProject<EnrichmentPutParameters>): Promise<void>;
    /** Deletes an enrichment category */
    removeCategory(body: ExceptProject<EnrichmentDeleteParameters>): Promise<void>;
    /** Updates or creates (based on id) an enrichment value within an enrichment category */
    upsertValue(body: ExceptProject<EnrichmentValuePutParameters>): Promise<void>;
    /** Deletes an enrichment value within an enrichment category. The category is left alone. */
    removeValue(body: ExceptProject<EnrichmentValueDeleteParameters>): Promise<void>;
}
declare class UncachedEnrichmentClient extends EnrichmentClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}
declare class CachedEnrichmentClient extends EnrichmentClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}

declare class ManifestClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches the Context manifest for a project */
    get(options?: ExceptProject<ManifestGetParameters>): Promise<ManifestGetResponse>;
    /** Publishes the Context manifest for a project */
    publish(): Promise<void>;
}
declare class UncachedManifestClient extends ManifestClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}
declare class CachedManifestClient extends ManifestClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}

declare class QuirkClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all Quirks for a project */
    get(options?: ExceptProject<QuirkGetParameters>): Promise<QuirkGetResponse>;
    /** Updates or creates (based on id) a Quirk */
    upsert(body: ExceptProject<QuirkPutParameters>): Promise<void>;
    /** Deletes a Quirk */
    remove(body: ExceptProject<QuirkDeleteParameters>): Promise<void>;
}
declare class UncachedQuirkClient extends QuirkClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}
declare class CachedQuirkClient extends QuirkClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}

declare class SignalClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all Signals for a project */
    get(options?: ExceptProject<SignalGetParameters>): Promise<SignalGetResponse>;
    /** Updates or creates (based on id) a Signal */
    upsert(body: ExceptProject<SignalPutParameters>): Promise<void>;
    /** Deletes a Signal */
    remove(body: ExceptProject<SignalDeleteParameters>): Promise<void>;
}
declare class UncachedSignalClient extends SignalClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}
declare class CachedSignalClient extends SignalClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}

declare class TestClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all Tests for a project */
    get(options?: ExceptProject<TestGetParameters>): Promise<TestGetResponse>;
    /** Updates or creates (based on id) a Test */
    upsert(body: ExceptProject<TestPutParameters>): Promise<void>;
    /** Deletes a Test */
    remove(body: ExceptProject<TestDeleteParameters>): Promise<void>;
}

declare class ContextClient {
    constructor(options: ClientOptions);
    readonly enrichments: EnrichmentClient;
    readonly aggregates: AggregateClient;
    readonly dimensions: DimensionClient;
    readonly manifest: ManifestClient;
    readonly quirks: QuirkClient;
    readonly signals: SignalClient;
    readonly tests: TestClient;
}
declare class UncachedContextClient extends ContextClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}
declare class CachedContextClient extends ContextClient {
    constructor(options: Omit<ClientOptions, 'bypassCache'>);
}

export { AggregateClient, AggregateDeleteParameters, AggregateGetParameters, AggregateGetResponse, AggregatePutParameters, ApiClient, ApiClientError, CachedAggregateClient, CachedContextClient, CachedDimensionClient, CachedEnrichmentClient, CachedManifestClient, CachedQuirkClient, CachedSignalClient, ClientOptions, ContextClient, DimensionClient, DimensionDefinition, DimensionDisplayData, DimensionGetParameters, DimensionGetResponse, EnrichmentClient, EnrichmentDeleteParameters, EnrichmentGetParameters, EnrichmentGetResponse, EnrichmentPutParameters, EnrichmentValueDeleteParameters, EnrichmentValuePutParameters, ExceptProject, LimitPolicy, ManifestClient, ManifestGetParameters, ManifestGetResponse, QuirkClient, QuirkDeleteParameters, QuirkGetParameters, QuirkGetResponse, QuirkPutParameters, SignalClient, SignalDeleteParameters, SignalGetParameters, SignalGetResponse, SignalPutParameters, TestDeleteParameters, TestGetParameters, TestGetResponse, TestPutParameters, UncachedAggregateClient, UncachedContextClient, UncachedDimensionClient, UncachedEnrichmentClient, UncachedManifestClient, UncachedQuirkClient, UncachedSignalClient, computeDimensionDefinitionDisplayData, computeDimensionDisplayData, computeDimensionDisplayName, handleRateLimits, nullLimitPolicy };
