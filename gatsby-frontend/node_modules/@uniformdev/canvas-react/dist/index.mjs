// src/components/DefaultNotImplementedComponent.tsx
import { CANVAS_LOCALIZATION_TYPE } from "@uniformdev/canvas";
import React from "react";
var wrapperStyles = {
  borderLeft: "4px solid #e42535",
  padding: "16px",
  fontSize: "16px",
  borderRadius: "0 8px 8px 0",
  margin: "8px",
  backgroundColor: "rgba(255, 255, 255, 0.45)",
  color: "#1d3557"
};
function DefaultNotImplementedComponent(props) {
  var _a;
  const componentType = (_a = props.component) == null ? void 0 : _a.type;
  if (!componentType) {
    return null;
  }
  if (componentType === CANVAS_LOCALIZATION_TYPE) {
    return /* @__PURE__ */ React.createElement("div", { style: wrapperStyles }, /* @__PURE__ */ React.createElement("p", null, "Seems like localization is not enabled in your application. Please read our documentation on how to", " ", /* @__PURE__ */ React.createElement(
      "a",
      {
        href: "https://docs.uniform.app/guides/composition/localization#activate-front-end",
        target: "_blank",
        style: { fontWeight: "bolder", textDecoration: "underline" },
        rel: "noreferrer"
      },
      "enable localization in your front-end application."
    )));
  }
  return /* @__PURE__ */ React.createElement("div", { style: wrapperStyles }, /* @__PURE__ */ React.createElement("h2", null, "Component: ", /* @__PURE__ */ React.createElement("code", null, componentType)), /* @__PURE__ */ React.createElement("p", null, /* @__PURE__ */ React.createElement("code", null, /* @__PURE__ */ React.createElement("strong", null, componentType)), " ", "has no React implementation. It may need to be added to your ", /* @__PURE__ */ React.createElement("code", null, "resolveRenderer()"), " function."), /* @__PURE__ */ React.createElement("details", null, /* @__PURE__ */ React.createElement("summary", { style: { cursor: "pointer" } }, "Props"), /* @__PURE__ */ React.createElement("pre", null, JSON.stringify(props, null, 2))));
}

// src/components/UniformComponent.tsx
import {
  CANVAS_ENRICHMENT_TAG_PARAM
} from "@uniformdev/canvas";
import { Track, TrackFragment, useUniformContext } from "@uniformdev/context-react";
import React4, { createContext, useContext } from "react";

// src/convertComponentToProps.ts
function convertComponentToProps(component) {
  var _a;
  const parameters = (_a = component.parameters) != null ? _a : {};
  const renderComponentProps = {
    ...Object.keys(parameters).reduce((acc, cur) => {
      acc[cur] = parameters[cur].value;
      return acc;
    }, {}),
    ...component.data,
    component
  };
  return renderComponentProps;
}

// src/storeDefinition.ts
var NOT_IMPLEMENTED_COMPONENT = "__not_implemented__";
var getTypeWithVariant = (type, variantId) => `${type}${variantId ? `__${variantId}` : ""}`;
var createComponentStore = () => {
  const components = /* @__PURE__ */ new Map();
  components.set(NOT_IMPLEMENTED_COMPONENT, DefaultNotImplementedComponent);
  return {
    register: ({ type, component, variantId }) => {
      components.set(getTypeWithVariant(type, variantId), component);
    },
    get: (type, variantId) => {
      return components.get(getTypeWithVariant(type, variantId));
    }
  };
};
var createComponentStoreResolver = ({ store, defaultComponent = DefaultNotImplementedComponent }) => {
  return (component) => {
    const resolved = store.get(getTypeWithVariant(component.type, component.variant));
    return resolved || defaultComponent;
  };
};

// src/store.ts
var componentStore = createComponentStore();
var registerUniformComponent = ({
  type,
  variantId,
  component
}) => {
  componentStore.register({
    type,
    variantId,
    component
  });
};
var componentStoreResolver = createComponentStoreResolver({
  store: componentStore
});

// src/components/UniformSlot.tsx
import {
  CANVAS_LOCALE_TAG_PARAM,
  CANVAS_PERSONALIZE_TYPE,
  CANVAS_TEST_TYPE,
  IN_CONTEXT_EDITOR_COMPONENT_START_ROLE,
  PLACEHOLDER_ID
} from "@uniformdev/canvas";
import React3 from "react";

// src/defaultSystemComponentResolver.tsx
import {
  mapSlotToPersonalizedVariations,
  mapSlotToTestVariations
} from "@uniformdev/canvas";
import { Personalize, Test } from "@uniformdev/context-react";
import * as React2 from "react";
var defaultSystemComponentResolver = {
  test: (component, key, renderChild) => {
    var _a, _b, _c, _d, _e;
    const testComponent = component;
    const variants = (_b = (_a = testComponent.slots) == null ? void 0 : _a.test) != null ? _b : [];
    const testName = (_e = (_d = (_c = testComponent.parameters) == null ? void 0 : _c.test) == null ? void 0 : _d.value) != null ? _e : "Untitled Test";
    const finalVariants = mapSlotToTestVariations(variants);
    return /* @__PURE__ */ React2.createElement(
      Test,
      {
        key,
        variations: finalVariants,
        name: testName,
        component: (variation) => renderChild(variation, key)
      }
    );
  },
  personalization: (component, key, renderChild) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const pzComponent = component;
    const processedVariants = mapSlotToPersonalizedVariations((_a = pzComponent == null ? void 0 : pzComponent.slots) == null ? void 0 : _a.pz);
    return /* @__PURE__ */ React2.createElement(
      Personalize,
      {
        key,
        variations: processedVariants,
        count: Number((_d = (_c = (_b = pzComponent.parameters) == null ? void 0 : _b.count) == null ? void 0 : _c.value) != null ? _d : 1),
        name: (_g = (_f = (_e = pzComponent.parameters) == null ? void 0 : _e.trackingEventName) == null ? void 0 : _f.value) != null ? _g : "Untitled Personalization",
        component: (variation) => renderChild(variation, 0)
      }
    );
  }
};

// src/components/UniformSlot.tsx
function UniformSlot({
  name,
  resolveRenderer,
  children,
  emptyPlaceholder
}) {
  var _a;
  const { data: parentData, resolveRenderer: parentResolveRenderer } = useUniformCurrentComponent();
  if (!parentData) {
    throw new Error("Cannot use Slot without a <UniformComponent /> wrapper.");
  }
  const slot = (_a = parentData.slots) == null ? void 0 : _a[name];
  if (!slot || !Array.isArray(slot)) {
    if (process.env.NODE_ENV === "development") {
      console.warn(
        `[canvas-dev] slot '${name}' was rendered, but it was not defined on its component. This is expected if the slot is optional, otherwise it may indicate a typo. Component:`,
        parentData
      );
    }
    return null;
  }
  const resolver = resolveRenderer != null ? resolveRenderer : parentResolveRenderer;
  const systemResolver = defaultSystemComponentResolver;
  const finalChildren = slot.map((component, index) => {
    const child = renderComponent({
      component,
      resolveRenderer: resolver,
      resolveSystem: systemResolver,
      key: `inner-${index}`,
      indexInSlot: index,
      slotName: name,
      parentComponent: parentData,
      slotChildrenCount: slot.length,
      emptyPlaceholder
    });
    const elements = children ? children({ child, component, key: `wrapped-inner-${index}` }) : child;
    return React3.createElement(React3.Fragment, { key: index }, elements);
  });
  return React3.createElement(React3.Fragment, void 0, finalChildren);
}
function renderComponent({
  component,
  resolveRenderer,
  resolveSystem,
  key = 0,
  indexInSlot,
  slotName,
  parentComponent,
  slotChildrenCount,
  emptyPlaceholder
}) {
  var _a, _b, _c, _d;
  const RenderComponent = resolveRenderer == null ? void 0 : resolveRenderer(component);
  if (component.type === CANVAS_TEST_TYPE) {
    return resolveSystem.test(
      component,
      key,
      (component2, key2) => renderComponent({ component: component2, resolveRenderer, resolveSystem, key: key2 })
    );
  } else if (component.type === CANVAS_PERSONALIZE_TYPE) {
    return resolveSystem.personalization(
      component,
      key,
      (component2, key2) => renderComponent({ component: component2, resolveRenderer, resolveSystem, key: key2 })
    );
  } else if (RenderComponent) {
    const props = convertComponentToProps(component);
    const shouldRenderContextualEditingTags = Boolean(component._id);
    const isPlaceholder = component._id === PLACEHOLDER_ID;
    return /* @__PURE__ */ React3.createElement(UniformComponent, { key, data: component, resolveRenderer }, !shouldRenderContextualEditingTags ? null : /* @__PURE__ */ React3.createElement(
      "script",
      {
        key,
        "data-role": IN_CONTEXT_EDITOR_COMPONENT_START_ROLE,
        "data-parent-id": parentComponent == null ? void 0 : parentComponent._id,
        "data-parent-type": parentComponent == null ? void 0 : parentComponent.type,
        "data-component-id": component._id,
        "data-slot-name": slotName != null ? slotName : "",
        "data-component-index": indexInSlot != null ? indexInSlot : "",
        "data-total-components": slotChildrenCount != null ? slotChildrenCount : "",
        "data-component-name": component.type,
        "data-is-placeholder": isPlaceholder ? "true" : void 0,
        "data-is-localized": ((_a = component.parameters) == null ? void 0 : _a[CANVAS_LOCALE_TAG_PARAM]) ? "true" : void 0,
        "data-component-title": (_d = (_c = (_b = component.parameters) == null ? void 0 : _b.title) == null ? void 0 : _c.value) != null ? _d : ""
      }
    ), isPlaceholder && emptyPlaceholder !== void 0 ? emptyPlaceholder : /* @__PURE__ */ React3.createElement(RenderComponent, { ...props }), !shouldRenderContextualEditingTags ? null : /* @__PURE__ */ React3.createElement("script", { "data-role": "component-end" }));
  } else if (process.env.NODE_ENV !== "production") {
    console.warn(
      `[canvas] found component of type '${component.type}' which the resolveRenderer prop returned no component for. Nothing will be rendered. The resolveRenderer function may need to be extended to handle the new type.`,
      component
    );
  }
  return null;
}
var Slot = UniformSlot;

// src/components/UniformComponent.tsx
var UniformComponentContext = createContext({});
function useUniformCurrentComponent() {
  return useContext(UniformComponentContext);
}
var componentStoreResolver2 = (component) => {
  const resolved = componentStore.get(component.type, component.variant);
  return resolved || null;
};
function UniformComponent({
  data,
  resolveRenderer,
  children,
  behaviorTracking
}) {
  var _a, _b, _c;
  const parentData = useUniformCurrentComponent();
  const contextContextProviderPresent = useUniformContext({ throwOnMissingProvider: false }) !== void 0;
  if (!data) {
    if (process.env.NODE_ENV === "development") {
      console.warn(`[canvas-dev] UniformComponent was rendered with no data, nothing will be output.`);
    }
    return null;
  }
  const contextValue = {
    data,
    resolveRenderer: resolveRenderer || (parentData == null ? void 0 : parentData.resolveRenderer) || componentStoreResolver2,
    behaviorTracking: (_a = behaviorTracking != null ? behaviorTracking : parentData == null ? void 0 : parentData.behaviorTracking) != null ? _a : "onView"
  };
  const enrichmentTags = (_c = (_b = data.parameters) == null ? void 0 : _b[CANVAS_ENRICHMENT_TAG_PARAM]) == null ? void 0 : _c.value;
  const TrackComponent = contextValue.behaviorTracking === "onLoad" ? TrackFragment : Track;
  const resolvedChildren = resolveChildren({
    children,
    data,
    hasParentLayout: Boolean(parentData.data)
  });
  return /* @__PURE__ */ React4.createElement(UniformComponentContext.Provider, { value: contextValue }, contextContextProviderPresent ? /* @__PURE__ */ React4.createElement(TrackComponent, { behavior: enrichmentTags }, resolvedChildren) : resolvedChildren);
}
function resolveChildren({
  children,
  data,
  hasParentLayout
}) {
  var _a;
  if (!children && !hasParentLayout) {
    const rootComponent = componentStore.get(data.type);
    if (rootComponent) {
      children = React4.createElement(rootComponent, convertComponentToProps(data));
    } else {
      if (Object.keys((_a = data.slots) != null ? _a : {}).length > 1 && process.env.NODE_ENV === "development") {
        console.warn(
          `[canvas-dev] All the slots in component '${data.type}' are rendered in no particular order. Use '<Slot name={slotName} />' to reliably render the slots.`
        );
      }
      children = Object.keys(data.slots || {}).map((slotName) => /* @__PURE__ */ React4.createElement(UniformSlot, { key: slotName, name: slotName }));
    }
  }
  const renderChildren = typeof children === "function" ? children(convertComponentToProps(data)) : children;
  return renderChildren;
}

// src/components/UniformComposition.tsx
import React5, { createContext as createContext2, useContext as useContext2 } from "react";

// src/hooks/useUniformContextualEditing.ts
import {
  createCanvasChannel,
  createUniformApiEnhancer,
  IN_CONTEXT_EDITOR_EMBED_SCRIPT_ID,
  IN_CONTEXT_EDITOR_QUERY_STRING_PARAM,
  isUpdateCompositionMessage
} from "@uniformdev/canvas";
import { useEffect, useMemo, useState } from "react";
var createApiEnhancer = createUniformApiEnhancer;
var registeredCompositionIds = /* @__PURE__ */ new Set();
var useUniformContextualEditing = ({
  initialCompositionValue,
  enhance = (message) => message.composition
}) => {
  const [contextualComposition, setContextualComposition] = useState();
  const channel = useMemo(() => {
    var _a;
    if (!isInContextEditingMode()) {
      return;
    }
    const channel2 = createCanvasChannel({
      broadcastTo: [(_a = window.opener) != null ? _a : window.top],
      listenTo: [window]
    });
    return channel2;
  }, []);
  useEffect(() => {
    if (!channel || registeredCompositionIds.has(initialCompositionValue == null ? void 0 : initialCompositionValue._id)) {
      return;
    }
    const unsubscribe = channel.on("update-composition", async (message) => {
      if (!isUpdateCompositionMessage(message)) {
        return;
      }
      const enhancedComposition = await enhance(message);
      setContextualComposition(enhancedComposition);
    });
    registeredCompositionIds.add(initialCompositionValue == null ? void 0 : initialCompositionValue._id);
    return () => {
      unsubscribe();
      registeredCompositionIds.delete(initialCompositionValue == null ? void 0 : initialCompositionValue._id);
    };
  }, [channel, enhance, initialCompositionValue == null ? void 0 : initialCompositionValue._id]);
  useEffect(() => {
    if (!isInContextEditingMode()) {
      return;
    }
    const existingScript = document.getElementById(IN_CONTEXT_EDITOR_EMBED_SCRIPT_ID);
    if (existingScript) {
      return;
    }
    window.__UNIFORM_CONTEXTUAL_EDITING__ = {
      framework: "React"
    };
    const script = document.createElement("script");
    script.id = IN_CONTEXT_EDITOR_EMBED_SCRIPT_ID;
    script.src = getCanvasInContextEmbedScriptUrl();
    script.async = true;
    document.head.appendChild(script);
  }, []);
  return {
    composition: contextualComposition != null ? contextualComposition : initialCompositionValue
  };
};
function getCanvasInContextEmbedScriptUrl() {
  const scriptUrl = `${window.document.referrer}files/canvas-in-context-embed/index.js`;
  return scriptUrl;
}
function isInContextEditingMode() {
  if (typeof window === "undefined") {
    return false;
  }
  const isOpenedByInContextEditor = new URLSearchParams(window.location.search).has(
    IN_CONTEXT_EDITOR_QUERY_STRING_PARAM
  );
  const isAllowlistedReferrer = Boolean(
    window.document.referrer.match(/(^https:\/\/|\.)(uniform.app|uniform.wtf|localhost:\d{4})\//)
  );
  return isOpenedByInContextEditor && isAllowlistedReferrer;
}
var useContextualEditing = useUniformContextualEditing;

// src/components/UniformComposition.tsx
var UniformCompositionContext = createContext2({ data: void 0 });
function useUniformCurrentComposition() {
  return useContext2(UniformCompositionContext);
}
function UniformComposition({
  data,
  behaviorTracking = "onView",
  children,
  resolveRenderer,
  contextualEditingEnhancer
}) {
  const { composition } = useUniformContextualEditing({
    initialCompositionValue: data,
    enhance: contextualEditingEnhancer
  });
  return /* @__PURE__ */ React5.createElement(UniformCompositionContext.Provider, { value: { data: composition, behaviorTracking, resolveRenderer } }, /* @__PURE__ */ React5.createElement(
    UniformComponent,
    {
      data: composition,
      behaviorTracking,
      resolveRenderer
    },
    children
  ));
}
var useComposition = useUniformCurrentComposition;
var Composition = UniformComposition;

// src/hooks/useCompositionEventEffect.ts
import {
  CANVAS_DRAFT_STATE,
  createEventBus,
  subscribeToComposition
} from "@uniformdev/canvas";
import { useEffect as useEffect2 } from "react";
function useCompositionEventEffect({
  enabled,
  projectId,
  compositionId,
  effect
}) {
  useEffect2(() => {
    if (!enabled || !compositionId || !projectId) {
      return;
    }
    let goodbye = void 0;
    const loadEffect = async () => {
      const eventBus = await createEventBus();
      if (eventBus) {
        goodbye = subscribeToComposition({
          eventBus,
          compositionId,
          compositionState: CANVAS_DRAFT_STATE,
          projectId,
          callback: effect,
          event: "updated"
        });
      }
    };
    loadEffect();
    return () => {
      if (goodbye) {
        goodbye();
      }
    };
  }, [compositionId, enabled, projectId, effect]);
}
export {
  Composition,
  DefaultNotImplementedComponent,
  NOT_IMPLEMENTED_COMPONENT,
  Slot,
  UniformComponent,
  UniformComposition,
  UniformSlot,
  componentStore,
  componentStoreResolver,
  createApiEnhancer,
  createComponentStore,
  createComponentStoreResolver,
  createUniformApiEnhancer,
  registerUniformComponent,
  useComposition,
  useCompositionEventEffect,
  useContextualEditing,
  useUniformContextualEditing,
  useUniformCurrentComponent,
  useUniformCurrentComposition
};
