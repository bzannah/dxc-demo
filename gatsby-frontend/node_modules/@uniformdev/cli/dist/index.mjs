#!/usr/bin/env node
import {
  __require,
  __toESM,
  require_source
} from "./chunk-IRPO3X2Q.mjs";

// src/index.ts
import yargs3 from "yargs";

// src/commands/optimize.ts
import yargs2 from "yargs";

// src/commands/optimize/manifest.ts
import yargs from "yargs";

// src/commands/optimize/manifest/download.ts
var import_chalk = __toESM(require_source());
import { writeFile } from "fs";
import fetch from "isomorphic-unfetch";
import { exit } from "process";

// src/constants.ts
var UniformBaseUrl = "https://uniform.app";

// src/commands/optimize/manifest/download.ts
var module = {
  command: "download [output]",
  describe: "Download intent manifest",
  builder: (yargs4) => {
    var _a;
    return yargs4.option("apiKey", {
      alias: "k",
      demandOption: true,
      string: true,
      default: process.env.UNIFORM_API_KEY,
      describe: "Uniform API key to use. Defaults to UNIFORM_API_KEY env if set."
    }).option("project", {
      describe: "Uniform project ID. Defaults to UOPT_CLI_PROJECT_ID or UNIFORM_PROJECT_ID env. Supports dotenv.",
      default: (_a = process.env.UOPT_CLI_PROJECT_ID) != null ? _a : process.env.UNIFORM_PROJECT_ID,
      type: "string",
      alias: ["p"]
    }).option("preview", {
      describe: "If set, fetches the unpublished preview manifest (assuming your API key has permission)",
      default: false,
      type: "boolean",
      alias: ["d"]
    }).option("output", {
      string: true,
      alias: "o",
      default: process.env.UNIFORM_MANIFEST_PATH,
      describe: "Path to write manifest to. Defaults to UNIFORM_MANIFEST_PATH env if set."
    });
  },
  handler: async ({ apiKey, output, project, preview }) => {
    const isLegacyApiKey = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(
      apiKey
    );
    if (isLegacyApiKey) {
      console.error(
        import_chalk.default.yellow(
          "WARNING: you appear to be using a deprecated type of API key. Keys like this will stop working soon; please create new keys on uniform.app."
        )
      );
    } else if (!project) {
      console.error(import_chalk.default.red("You must specify the project ID"));
      exit(1);
    }
    const baseUrl = resolveBaseUrl();
    const qs = new URLSearchParams();
    if (project) {
      qs.set("projectId", project);
    }
    if (preview) {
      qs.set("preview", "true");
    }
    const manifestUrl = `${baseUrl}api/v1/manifest?${qs.toString()}`;
    let fetchResponse = void 0;
    try {
      fetchResponse = await fetch(manifestUrl, {
        headers: {
          "x-api-key": apiKey
        }
      });
      if (!fetchResponse.ok) {
        if (fetchResponse.status === 403) {
          throw `The API key ${apiKey} had no published data. This means it is either incorrectly entered, or intents have not been published since creating the API key.`;
        }
        throw `${fetchResponse.status} ${fetchResponse.statusText}, content ${await fetchResponse.text()}`;
      }
    } catch (e) {
      console.error(import_chalk.default.red(`\u26A0 Error fetching intent manifest ${manifestUrl}`));
      console.error(import_chalk.default.gray(`  \u2757 ${e}`));
      exit(1);
    }
    let json;
    try {
      json = await fetchResponse.json();
    } catch (e) {
      console.error(import_chalk.default.red(import_chalk.default.red(`\u26A0 Error parsing intent manifest ${manifestUrl}`)));
      console.error(import_chalk.default.gray(`  \u2757 ${e}`));
      console.error(`Response: ${await fetchResponse.text()}`);
      exit(1);
    }
    const text = JSON.stringify(json, null, 2);
    if (output) {
      writeFile(output, text, (error) => {
        if (error) {
          console.error(`Error writing file to ${output}
`, error);
          exit(1);
        }
        console.log(import_chalk.default.green(`\u2705 ${output} has been updated from ${manifestUrl}`));
      });
    } else {
      console.log(text);
    }
  }
};
var resolveBaseUrl = () => {
  let baseUrl = process.env.UNIFORM_CLI_BASE_URL || UniformBaseUrl;
  if (!baseUrl.endsWith("/")) {
    baseUrl += "/";
  }
  return baseUrl;
};
var download_default = module;

// src/commands/optimize/manifest.ts
var module2 = {
  command: "manifest <command>",
  describe: "Intent manifest commands",
  builder: () => {
    return yargs.command(download_default);
  },
  handler: () => {
    return yargs.showHelp();
  }
};
var manifest_default = module2;

// src/commands/optimize.ts
var command = {
  command: "optimize <command>",
  aliases: ["opt"],
  describe: "Uniform Optimize commands",
  builder: () => {
    return yargs2.command(manifest_default);
  },
  handler: () => {
    return yargs2.showHelp();
  }
};
var optimize_default = command;

// src/index.ts
__require("dotenv").config();
var plugins = [
  "@uniformdev/canvas/cli",
  "@uniformdev/context/cli",
  "@uniformdev/project-map/cli",
  "@uniformdev/uniform-new"
];
var yarggery = yargs3.scriptName("uniform");
plugins.flatMap((plugin) => {
  try {
    const commands = __require(plugin).uniformCLI.commands;
    const commandsToAdd = Array.isArray(commands) ? commands : [];
    commandsToAdd.forEach((command2) => {
      yarggery = yarggery.command(command2);
    });
  } catch (e) {
  }
});
yarggery.command(optimize_default).demandCommand(1, "").strict().help().argv;
