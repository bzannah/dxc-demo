// src/createSanityEnhancer.ts
import {
  createLimitPolicy
} from "@uniformdev/canvas";
var CANVAS_SANITY_PARAMETER_TYPES = Object.freeze(["sanityEntrySelector"]);
function createSanityEnhancer({
  client,
  previewClient,
  modifyQuery,
  limitPolicy
}) {
  previewClient = previewClient != null ? previewClient : client;
  return {
    enhanceOne: async ({ parameter, parameterName, component, context }) => {
      var _a;
      if (parameterIsSanityEntrySelector(parameter)) {
        const clientToUse = context.preview ? previewClient : client;
        try {
          const defaultQuery = `*[_id == $id][0]`;
          const defaultParams = { id: parameter.value };
          const { query, queryParameters } = (_a = modifyQuery == null ? void 0 : modifyQuery({
            query: defaultQuery,
            queryParameters: defaultParams,
            parameter,
            component,
            parameterName,
            context
          })) != null ? _a : { query: defaultQuery, queryParameters: defaultParams };
          return await clientToUse.fetch(query, queryParameters);
        } catch (e) {
          throw new Error(`Failed loading Sanity document ${parameter.value} ${e.toString()}`);
        }
      }
    },
    limitPolicy: limitPolicy != null ? limitPolicy : createLimitPolicy({
      throttle: false
    })
  };
}
function parameterIsSanityEntrySelector(parameter) {
  return parameter.type === "sanityEntrySelector" && typeof (parameter == null ? void 0 : parameter.value) === "string";
}
export {
  CANVAS_SANITY_PARAMETER_TYPES,
  createSanityEnhancer
};
