"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  CANVAS_SANITY_PARAMETER_TYPES: () => CANVAS_SANITY_PARAMETER_TYPES,
  createSanityEnhancer: () => createSanityEnhancer
});
module.exports = __toCommonJS(src_exports);

// src/createSanityEnhancer.ts
var import_canvas = require("@uniformdev/canvas");
var CANVAS_SANITY_PARAMETER_TYPES = Object.freeze(["sanityEntrySelector"]);
function createSanityEnhancer({
  client,
  previewClient,
  modifyQuery,
  limitPolicy
}) {
  previewClient = previewClient != null ? previewClient : client;
  return {
    enhanceOne: async ({ parameter, parameterName, component, context }) => {
      var _a;
      if (parameterIsSanityEntrySelector(parameter)) {
        const clientToUse = context.preview ? previewClient : client;
        try {
          const defaultQuery = `*[_id == $id][0]`;
          const defaultParams = { id: parameter.value };
          const { query, queryParameters } = (_a = modifyQuery == null ? void 0 : modifyQuery({
            query: defaultQuery,
            queryParameters: defaultParams,
            parameter,
            component,
            parameterName,
            context
          })) != null ? _a : { query: defaultQuery, queryParameters: defaultParams };
          return await clientToUse.fetch(query, queryParameters);
        } catch (e) {
          throw new Error(`Failed loading Sanity document ${parameter.value} ${e.toString()}`);
        }
      }
    },
    limitPolicy: limitPolicy != null ? limitPolicy : (0, import_canvas.createLimitPolicy)({
      throttle: false
    })
  };
}
function parameterIsSanityEntrySelector(parameter) {
  return parameter.type === "sanityEntrySelector" && typeof (parameter == null ? void 0 : parameter.value) === "string";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CANVAS_SANITY_PARAMETER_TYPES,
  createSanityEnhancer
});
